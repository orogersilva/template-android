rootProject.appPlugins.each {
    apply plugin: it
}

apply from: "${rootProject.getRootDir()}/tools/git/script-git-version.gradle"

android {

    defaultConfig {

        applicationId "com.orogersilva.androidprojecttemplate"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    productFlavors {

        dev {

            versionCode gitVersionCodeTime
            versionName gitVersionName

            applicationIdSuffix ".dev"
        }

        prod {

            versionCode gitVersionCode
            versionName gitVersionName
        }
    }

    buildTypes {

        debug {

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    rootProject.file('tools/proguard/rules-proguard-debug.pro')
        }

        release {

            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    rootProject.file('tools/proguard/rules-proguard.pro')
        }
    }

    play {

        track = 'alpha'
        untrackOld = true
        uploadImages = true
    }

    splits {

        abi {

            enable true
            reset()
            include 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'mips', 'x86', 'x86_64'
            universalApk false
        }

        density {

            enable false
        }
    }

    lintOptions {

        abortOnError false
        checkReleaseBuilds false
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
}

// Show test status in console.
tasks.withType(Test) {

    testLogging {
        events "passed", "failed"
    }
}

dependencies {

    compile fileTree(dir: 'libs', include: ['*.jar'])

    rootProject.appDependencies.each {
        add(it.configuration, it.dependency, it.options)
    }
}

apply from: "${rootProject.getRootDir()}/android.gradle"